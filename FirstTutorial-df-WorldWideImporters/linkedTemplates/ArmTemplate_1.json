{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "FirstTutorial-df-WorldWideImporters"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SQLOnPremIncremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LegacySensorReadingLastInserted",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select *\nfrom IncrementalWatermarks\nwhere TableName = 'LegacySensorReadings'",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "IncrementalWatermarksDS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "MaxLegacySensorReadingId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select max(id) as MaxId from LegacySensorReadings",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "OnPremiseLegacySensorReadingDS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "LegacySensorReadings",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MaxLegacySensorReadingId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LegacySensorReadingLastInserted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select *\nfrom LegacySensorReadings\nwhere\nid > @{activity('LegacySensorReadingLastInserted').output.firstRow.LastInsertedId}\nand id <= @{activity('MaxLegacySensorReadingId').output.firstRow.MaxId}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ReadingId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ReadingId",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ReadingDateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ReadingDateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "LocationId",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "LocationId",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "PollutionLevel",
											"type": "Byte",
											"physicalType": "tinyint"
										},
										"sink": {
											"name": "PollutionLevel",
											"type": "Byte",
											"physicalType": "tinyint"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OnPremiseLegacySensorReadingDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureLegacySensorReadingDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateLegacySensorReadingLastInserted",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LegacySensorReadings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdateIncrementalWatermark]",
							"storedProcedureParameters": {
								"id": {
									"value": {
										"value": "@{activity('MaxLegacySensorReadingId').output.firstRow.MaxId}",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"tableName": {
									"value": "LegacySensorReadings",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabaseLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n\tCity\n,\t[State Province]\n,\tCountry\n,\tContinent\nFROM \n\tWideWorldImportersDW.Dimension.City\nWHERE\n\t[State Province] = 'California'",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@pipeline().parameters.FileExtension",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQLDB_ONPREM_WorldWideImporterDW",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"FileExtension": {
						"type": "string",
						"defaultValue": "csv"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}